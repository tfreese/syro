// Execute Tasks in SubModule: gradle MODUL:clean build
//buildscript {
//    repositories {
//        mavenLocal()
//        mavenCentral()
//        gradlePluginPortal()
//    }
//
//    dependencies {
//        classpath("io.spring.gradle:dependency-management-plugin:$version_springDependencyManagement")
//    }
//}
//
// or as alternative newer Variant
//
plugins {
    id "com.github.ben-manes.versions" version "$version_gradleVersionsPlugin"
    id "java-library"
    id "maven-publish"
    id "io.spring.dependency-management" version "$version_springDependencyManagement"
    id "name.remal.sonarlint" version "$version_nameRemalSonarlintPlugin"
    id "checkstyle"
    id "jacoco"
}

// project.layout.buildDirectory = "target"
//
// apply from: "../dependencies.gradle"
// apply from: "../dependencies.properties"

repositories {
    mavenLocal()
    mavenCentral()
}

dependencyManagement {
    imports {
        // mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
        mavenBom("org.springframework.boot:spring-boot-dependencies:$version_springBoot")
    }

    dependencies {
        // Empty
    }
}

// def versions = [:]
// versions["checkstyle"] = "10.17.0"
// ext.set("versions", versions)

// configurations.configureEach {
//     exclude group: "ch.qos.logback", module: "logback-classic"
// }
// configurations.all {
//     exclude group: "ch.qos.logback", module: "logback-classic"
// }
// configurations.testImplementation {
//     exclude group: "ch.qos.logback", module: "logback-classic"
// }

// ant.lifecycleLogLevel = "INFO"
//
//// Register ANT-Tasks as Gradle-Tasks with Prefix "ant-" in Group "other".
//ant.importBuild("ant_build.xml") { antTargetName -> "ant-" + antTargetName }
//ant.properties["version"] = project.version
//
//// Set group property for all Ant tasks.
//tasks.matching { task -> task.name.startsWith("ant-") }.configureEach{ group = "ant" }
//
// "ant-target" {
//     ant.properties["version"] = version
// }

//// Dynamic Tasks
// def apps = ["App1", "App2"]
// def appProperties = [:]
// appProperties["valueApp1"] = "app1-value"
// appProperties["valueApp2"] = "app2-value"
//
// apps.each { app ->
//     tasks.register("taskFor${app}") {
//         group = "MyTasks"
//         description "some generic task"
//
//         var value = "${appProperties."value$app"}"
//
//         doLast {
//             logger.lifecycle("app value: {}", value)
//         }
//     }
// }

// sourceSets {
//     that.resources {
//         srcDir layout.projectDirectory.dir("..").dir("that")
//         include "file.ext"
//     }
//
//     main {
//         resources {
//             srcDir(layout.projectDirectory.dir("..").dir("this"))
//             srcDir(that.resources)
//             srcDir(configurations.someArtifact)
//         }
//     }
// }

dependencies {
    //implementation(platform("org.springframework.boot:spring-boot-dependencies:$version_springBoot"))
    compileOnly("io.netty:netty-buffer")

    // JARs aus libs-Folder.
    //implementation fileTree(dir: "libs", include: "*.jar")

    testImplementation("io.netty:netty-buffer")
    testImplementation("org.junit.jupiter:junit-jupiter")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}

clean {
    doFirst {
        def dirs = ["bin", "logs", "out", "target"]

        dirs.each(dir -> {
            Directory directory = layout.projectDirectory.dir(dir)

            if (directory.getAsFile().exists()) {
                // println("delete: " + directory)
                logger.lifecycle("delete: {}", directory)
                // delete fileTree(directory).include("**/*")
                delete directory
            }
        })
    }
}

java {
    // sourceCompatibility = JavaVersion.VERSION_23
    // targetCompatibility = JavaVersion.VERSION_23

    toolchain {
        languageVersion = JavaLanguageVersion.of(23)
        // vendor = JvmVendorSpec.ORACLE
        // implementation = JvmImplementation.J9
    }

    // withJavadocJar()
    // withSourcesJar()
}

jar {
    enabled = true

    manifest {
        attributes(
                "Build-By": "https://github.com/tfreese",
                "Build-Date": java.time.LocalDateTime.now().withNano(0),
                "Build-JDK": System.getProperty("java.version") + " - " + System.getProperty("java.specification.vendor"),
                // "Main-Class": project.main,
                "Build-Title": project.name,
                "Build-Version": project.version
        )
    }

    // into "META-INF", {
    //     from layout.projectDirectory.dir("src").dir("main").dir("xsd")
    // }
    // metaInf {
    //     from layout.projectDirectory.dir("src").dir("main").dir("xsd")
    // }
}

test {
    enabled = true
    ignoreFailures = false

    // No parallel Tests: gradle --no-parallel --max-workers 1 test
    // or 'maxParallelForks = 1'

    useJUnitPlatform()

    jvmArgs += "--add-opens=java.base/java.net=ALL-UNNAMED"

    systemProperty "java.awt.headless", "true"

    filter {
        // Deactivate Class
        // excludeTestsMatching "PACKAGE.CLASS"

        // Deactivate Method
        // excludeTestsMatching "PACKAGE.CLASS.METHOD"

        // Deactivate Package with Wildcards
        // excludeTestsMatching "*.integration.*"

        // Deactivate Method with Wildcards
        // excludeTestsMatching "*stress*"
    }

    reports {
        junitXml.required = true
        html.required = false
    }

    testLogging {
        showStandardStreams = false
        // events = ["PASSED", "FAILED", "SKIPPED", "STANDARD_OUT", "STANDARD_ERROR"]
        events = ["FAILED", "SKIPPED"]
        // showExceptions = true
        // showCauses = true
        // showStackTraces = true
        // exceptionFormat = TestExceptionFormat.FULL
    }

    afterSuite { desc, result ->
        if (!desc.parent) {
            String output = "Results: ${result.resultType} - ${result.testCount} Tests - ${result.successfulTestCount} SUCCESSFUL, ${result.failedTestCount} FAILED, ${result.skippedTestCount} SKIPPED"

            String lines = "-".repeat(output.length())
            // String lines = Stream.generate(() -> "-").limit(output.length()).collect(Collectors.joining());

            logger.lifecycle(lines)
            logger.lifecycle(output)
            logger.lifecycle(lines)
        }
    }

    finalizedBy("jacocoTestReport")
}

javadoc {
    enabled = true

    // destinationDir = layout.buildDirectory.dir("customJavaDocDir")

    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }

    // No Errors for missing JavaDoc.
    options.addBooleanOption("Xdoclint:none", true)
    options.addStringOption("-quiet")
    // options.addStringOption("charset", "UTF-8")

    options.locale = "de"
    options.encoding = "UTF-8"
}

tasks.register("listRepos") {
    group = "MyTasks"
    description "Shows configured Repositories"

    doLast {
        println "Plugin Repositories:"
        project.buildscript.repositories.each { println "- " + it.properties.displayName }
        // project.buildscript.repositories.getAsMap().forEach {
        //     name, repo -> println("$name >> ${repo.properties.displayName}")
        // }

        println "Dependency Repositories:"
        project.repositories.each { println "Name: " + it.name + "; url: " + it.url }

        // project.buildscript.repositories.each { println "Name: " + it.name + "; url: " + it.url }
        // project.buildscript.repositories.each { println it.properties }

        // project.buildscript.repositories.each {
        //     if (it.properties.displayName == 'Gradle Central Plugin Repository') {
        //         println "Name: " + it.displayName
        //     } else {
        //         println "Name: " + it.name + "; url: " + it.url
        //     }
        // }
    }
}

tasks.register("listDependencies") {
    group = "MyTasks"
    description "Shows configured Dependencies"

    doLast {
        println "Dependencies:"
        project.configurations.compileClasspath.each { println it }
    }
}

// --add-opens=java.base/java.util.concurrent=ALL-UNNAMED // Hat zur Kompilierungszeit keine Auswirkungen
def compilerArgs = [
        // "--add-modules=ALL-SYSTEM",
        // "--add-modules=jdk.incubator.concurrent",
        // "--add-exports=java.base/sun.security.action=ALL-UNNAMED",
        // "-verbose",
        // Compiler Warnings as Errors.
        // "-Werror",
        // Enable all.
        // "-Xlint:all",
        // Überflüssige Typecast, wie zum Beispiel in der Anweisung int i = (int) 0;
        "-Xlint:cast",
        // Verdächtige Bytecode-Dateien, beispielsweise mit anderen Merkmalen als die ebenfalls enthaltene Versionsangabe eigentlich gestattet.
        "-Xlint:classfile",
        // Verwendung von Klassen oder Methoden, die als Deprecated markiert sind.
        "-Xlint:deprecation",
        // Annotation @Deprecated und @deprecated-Tag im Javadoc-Kommentar widersprechen sich.
        "-Xlint:dep-ann",
        // Potenzielle Division durch null.
        "-Xlint:divzero",
        // Leere Anweisung nach if.
        "-Xlint:empty",
        // case-Block in einer switch-Anweisung ohne abschließendes break.
        "-Xlint:fallthrough",
        // return-Anweisung in einem finally-Block. Diese Konstruktion kann eine andere return-Anweisung im try-Block maskieren und zu schwer nachvollziehbarem Verhalten führen.
        "-Xlint:finally",
        // Aufruf des Compilers mit einer älteren Version für den Quelltext (Schalter -source) als für die Laufzeitbibliothek (-bootclasspath).
        // Dabei kann Bytecode entstehen, der auf der älteren Plattform nicht funktioniert, weil er sich auf die neuere Laufzeitbibliothek bezieht.
        "-Xlint:options",
        // Fehlende @Override-Annotation.
        "-Xlint:overrides",
        // Unerreichbares Element im Classpath.
        "-Xlint:path",
        // Annotation gefunden, für die sich kein Prozessor zuständig erklärt.
        "-Xlint:processing",
        // Verwendung einer generischen Klasse oder eines generischen Interface ohne Typ-Argument.
        "-Xlint:rawtypes",
        // Fehlende oder falsche Definition von serialVersionUID in einer Klasse, die das Interface Serializable implementiert.
        "-Xlint:serial",
        // Bezug auf ein statisches Element über eine Objektreferenz statt über den Klassennamen.
        "-Xlint:static",
        // Verdächtiger ARM-Block, wie beispielsweise ARM-Block mit einer Ressource, die nicht verwendet wird, ARM-Block mit einem expliziten close-Aufruf,
        // Definition einer close-Methode mit einer anderen Exception als IOException.
        "-Xlint:try",
        // Einsatz eines generischen Typs in einem Kontext, in dem die statische Typprüfung des Compilers nicht mehr sicherstellen kann, dass Typfehler zur Laufzeit ausgeschlossen sind.
        "-Xlint:unchecked",
        // Vararg-Parameter mit einem generischen Typ verbieten.
        "-Xlint:varargs"
        // Disable annotation processing.
        //, "-proc:none"
]

[compileJava, compileTestJava]*.options*.encoding = "UTF-8"
[compileJava, compileTestJava]*.options*.debug = true
// [compileJava, compileTestJava]*.options*.incremental = true
// [compileJava, compileTestJava]*.options*.compilerArgs += compilerArgs

tasks.compileJava {
    options.compilerArgs.addAll(compilerArgs)
}
tasks.compileTestJava {
    options.compilerArgs.addAll(compilerArgs)
}

// tasks.withType(JavaCompile).configureEach {
//     // options.encoding = "UTF-8"
//
//     doFirst {
//         println "Compiler args: " + options.compilerArgs
//     }
// }

tasks.register("sourcesJar", Jar) {
    group = "MyTasks"
    description = "Creates a jar from the source files."

    dependsOn("classes")

    getArchiveClassifier().set("sources")
    from sourceSets.main.allSource
}

tasks.register("testJar", Jar) {
    group = "MyTasks"
    description = "Creates a jar from the test files."

    dependsOn("testClasses")

    getArchiveClassifier().set("test")
    from sourceSets.test.output
}

tasks.register("testSourcesJar", Jar) {
    group = "MyTasks"
    description = "Creates a jar from the test-source files."

    dependsOn("testClasses")

    getArchiveClassifier().set("test-sources")
    from sourceSets.test.allSource
}

tasks.register("javadocJar", Jar) {
    group = "MyTasks"
    description = "Creates a jar from the javadoc files."

    dependsOn("javadoc")

    getArchiveClassifier().set("javadoc")
    from javadoc.destinationDir
}

// Merge Artefacts.
artifacts {
    archives sourcesJar
    archives testJar
    archives testSourcesJar
    archives javadocJar

    // archives file: "A-sources.jar", name: "A", type: "jar", classifier: "sources"
}

// https://docs.gradle.org/current/userguide/publishing_maven.html
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = project.name
                description = project.description

                //...
            }

            // artifact sourcesJar
            // artifact("macos-app-x64.dmg") {
            //     classifier "macos-x64"
            //     extension "dmg"
            // }
            // artifact("windows-app-x64.exe") {
            //     classifier "windows-x64"
            //     extension "exe"
            // }
        }

        // custom(MavenPublication) {
        //     if (!fileTree(dir: "generated/reports", include: '**/*').empty) {
        //         artifact customReport
        //     }
        //     if (another_condition) {
        //         artifact anotherDistribution
        //     }
        //     if (yet_another_condition) {
        //         artifact yetAnotherDistribution
        //     }
        //     ...
        // }
    }

    // repositories {
    //     maven {
    //         def releasesRepoUrl = layout.buildDirectory.dir("repos/releases")
    //         def snapshotsRepoUrl = layout.buildDirectory.dir("repos/snapshots")
    //
    //         url = project.hasProperty("release") ? releasesRepoUrl : snapshotsRepoUrl
    //         allowInsecureProtocol = true
    //
    //         credentials {
    //             username = deployRepoUsername
    //             password = deployRepoPassword
    //         }
    //     }
    // }
}

// https://checkstyle.sourceforge.io
checkstyle {
    // toolVersion = "${versions.checkstyle}"
    toolVersion = "$version_checkstyle"

    // Default Directory: <root>/config/checkstyle/
    configDirectory = file("${System.getProperty('user.home')}/git/parents/config/checkstyle")
    // configDirectory = layout.projectDirectory.dir("..").dir("..").dir("config").dir("checkstyle").asFile
    // configFile = layout.projectDirectory.dir("..").dir("..").dir("config").dir("checkstyle").file("checkstyle.xml").asFile

    configProperties.put("org.checkstyle.suppressionFilter", file("${System.getProperty('user.home')}/git/parents/config/checkstyle/suppressions.xml"))

    ignoreFailures = true
    showViolations = true
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
        // html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }
}

// https://rules.sonarsource.com/java
// https://github.com/remal-gradle-plugins/sonarlint
sonarLint {
    ignoreFailures = true
    isGeneratedCodeIgnored = true

    nodeJs {
        detectNodeJs = true    // If not exist, try to Download: https://nodejs.org/dist
        logNodeJsNotFound = false
    }

    languages {
        include("java") // Enable Java language only, all other languages become disabled
        exclude("kotlin") // Disable Kotlin language, all other languages remain enabled
    }

    logging {
        withDescription = false // Show rule descriptions in console output
    }

    rules {
        enable(
                // Method names should comply with a naming convention. (that is disabled by default)
                "java:S100",
                // Class names should comply with a naming convention.(that is disabled by default)
                "java:S101",
                // Lines should not be too long.
                "java:S103",
                // Tabulation characters should not be used.
                "java:S105"
        )
        disable(
                // Replace this use of System.out by a logger.
                "java:S106",
                // Inheritance tree of classes should not be too deep.
                "java:S110",
                // Define and throw a dedicated exception instead of using a generic one.
                "java:S112",
                // This block of commented-out lines of code should be removed.
                "java:S125",
                // Loops should not contain more than a single "break" or "continue" statement.
                "java:S135",
                // Mergeable "if" statements should be combined.
                "java:S1066",
                // Refactor your code to get this URI from a customizable parameter.
                "java:S1075",
                // Catch Exception instead of Throwable.
                "java:S1181",
                //  Define a constant instead of duplicating this literal.
                "java:S1192",
                // Invoke method(s) only conditionally. (Logger)
                "java:S2629",
                // Cognitive Complexity of methods should not be too high.
                "java:S3776",
                // The Singleton design pattern should be used with care
                "java:S6548",
                // Don't use the query "SELECT *"
                "java:S6905"
        )

        rule("java:S103") {
            property("maximumLineLength", "180")
        }

        // Constructor/Method has <N> parameters, which is greater than <X> authorized.
        rule("java:S107") {
            property("max", "10")
            property("constructorMax", "10")
        }
    }

    // Allow upper camel-case for type parameter names
    // ruleParameter("java:S119", "format", "^[A-Z][a-zA-Z0-9]*$")

    // ignoredPaths.add("**/demo/FailsafeDemo.java")
}

// DefaultModuleComponentIdentifier
def removeIf = { ModuleComponentIdentifier coordinate ->
    if ("org.owasp.dependencycheck".equals(coordinate.getGroup())) {
        // Since 9.x an Account is required.
        if (!coordinate.getVersion().startsWith("8")) {
            logger.lifecycle("ignored: {}", coordinate)
            return true
        }
    }

    def stableKeyword = ["RELEASE", "FINAL", "GA"].any { it -> coordinate.getVersion().toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/

    return !stableKeyword && !(coordinate.getVersion() ==~ regex)
}
tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = false

    rejectVersionIf {
        removeIf(it.candidate)
    }

    outputFormatter = { result ->
        def updatable = result.outdated.dependencies

        if (updatable.isEmpty()) {
            logger.lifecycle("No updates available.")

            return
        }

        logger.lifecycle("There are new updates:")

        updatable.each { dependency ->
            var newVersion = java.util.Optional.ofNullable(dependency.available.release)
                    .or(() -> java.util.Optional.ofNullable(dependency.available.milestone))
                    .or(() -> java.util.Optional.ofNullable(dependency.available.integration))
                    .orElse("???")
            logger.lifecycle("{}:{}:{} -> {}", dependency.group, dependency.name, dependency.version, newVersion)
        }
    }
}

// For Composite Build.
tasks.register("cleanAll", GradleBuild) {
    tasks = ["clean"]
}
tasks.register("buildAll", GradleBuild) {
    tasks = ["build"]
}
